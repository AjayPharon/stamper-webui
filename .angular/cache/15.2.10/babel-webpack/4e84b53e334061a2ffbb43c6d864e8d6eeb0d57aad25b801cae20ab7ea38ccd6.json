{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpConnectService {\n  constructor(http) {\n    this.http = http;\n    this.className = \"HttpConnectService\";\n    const methodName = \"constructor\";\n  }\n  ConnectByPOSTFormData(urlPath, formData) {\n    const methodName = \"ConnectByPOST\";\n    const headerOptions = new HttpHeaders({\n      // 'Accept': 'application/json, text/plain, */*',\n      // 'Authorization': 'Bearer ' + ls_BearerToken\n    });\n    const options = {\n      headers: headerOptions\n    };\n    return this.http.post(urlPath, formData, options).pipe(catchError(this.handleError));\n  }\n  ConnectByPOST(urlPath, data) {\n    const methodName = \"ConnectByPOST\";\n    // const headerOptions = new HttpHeaders();\n    // headerOptions.append('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n    // headerOptions.append('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE');\n    // headerOptions.append('Access-Control-Allow-Origin', '*');\n    // headerOptions.append('Content-Type', 'application/x-www-form-urlencode');\n    // //headerOptions.set('Accept', 'application/x-www-form-urlencoded');\n    // // headerOptions.set('Content-Type', 'application/json');\n    // headerOptions.append('Accept', 'application/x-www-form-urlencoded, application/json , text/plain, */*');\n    const headerOptions = new HttpHeaders({\n      //'Content-Type': 'application/x-www-form-urlencode',\n      'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*'\n    });\n    const options = {\n      headers: headerOptions\n      //  withCredentials: false,\n      //responseType: 'blob' as 'json'\n    };\n    //**Angular 7+ ถ้าจะส่งแบบ x-www-form-urlencode ให้ส่ง body เป็น HttpParams และไม่ต้อง set HttpHeader\n    //จำเป็นต้องทำแบบนี้ไม่งั้น header มันจะเสีย\n    //**http post ไม่ต้องสั่ง unsubscribe มันทำให้เองตอนได้ค่าคืนมาแล้ว**\n    return this.http.post(urlPath, data, options).pipe(catchError(this.handleError) // then handle the error\n    );\n  }\n\n  ConnectByPOST_JSON(urlPath, data) {\n    const methodName = \"ConnectByPOST_JSON\";\n    // const headerOptions = new HttpHeaders();\n    // headerOptions.append('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n    // headerOptions.append('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE');\n    // headerOptions.append('Access-Control-Allow-Origin', '*');\n    // headerOptions.append('Content-Type', 'application/json');\n    // headerOptions.append('Accept', 'application/x-www-form-urlencoded, application/json , text/plain, */*');\n    // let ls_BearerToken = this.credentialService.Obj.BearerKey;\n    const headerOptions = new HttpHeaders({\n      'Content-Type': 'application/json'\n      // 'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*',\n      // 'Authorization': 'Bearer ' + ls_BearerToken\n    });\n\n    const options = {\n      headers: headerOptions\n      // withCredentials: false,\n      // responseType: 'blob' as 'json'\n    };\n    //**Angular 7+ ถ้าจะส่งแบบ x-www-form-urlencode ให้ส่ง body เป็น HttpParams และไม่ต้อง set HttpHeader\n    //จำเป็นต้องทำแบบนี้ไม่งั้น header มันจะเสีย\n    //**http post ไม่ต้องสั่ง unsubscribe มันทำให้เองตอนได้ค่าคืนมาแล้ว**\n    return this.http.post(urlPath,\n    // JSON.stringify(data),\n    data, options).pipe(catchError(this.handleError) // then handle the error\n    );\n  }\n\n  ConnectByPOST_JSON_Bolb(urlPath, data) {\n    const methodName = \"ConnectByPOST_JSON_Bolb\";\n    // const headerOptions = new HttpHeaders();\n    // headerOptions.append('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n    // headerOptions.append('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE');\n    // headerOptions.append('Access-Control-Allow-Origin', '*');\n    // headerOptions.append('Content-Type', 'application/json');\n    // headerOptions.append('Accept', 'application/x-www-form-urlencoded, application/json , text/plain, */*');\n    const headerOptions = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*'\n    });\n    let options = {\n      headers: headerOptions,\n      withCredentials: false,\n      responseType: 'blob'\n    };\n    //**Angular 7+ ถ้าจะส่งแบบ x-www-form-urlencode ให้ส่ง body เป็น HttpParams และไม่ต้อง set HttpHeader\n    //จำเป็นต้องทำแบบนี้ไม่งั้น header มันจะเสีย\n    //**http post ไม่ต้องสั่ง unsubscribe มันทำให้เองตอนได้ค่าคืนมาแล้ว**\n    return this.http.post(urlPath,\n    // data.toString(),\n    //JSON.stringify(data),\n    data,\n    //options,\n    {\n      headers: headerOptions,\n      observe: 'response',\n      responseType: 'blob'\n    }).pipe(catchError(this.handleError) // then handle the error\n    );\n  }\n\n  ConnectByGET(urlPath, data) {\n    const methodName = \"ConnectByGET\";\n    // let GETPath = urlPath + \"?\" + data;\n    let GETPath = urlPath;\n    console.log(\"GET Path = \" + GETPath);\n    // let ls_BearerToken = this.credentialService.Obj.BearerKey;\n    const headerOptions = new HttpHeaders({\n      // 'Content-Type': 'application/json',\n      // 'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*',\n      // 'Authorization': 'Bearer ' + ls_BearerToken\n      'Content-Type': 'application/json',\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*',\n      'origins': 'localhost:8080/*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, PATCH, DELETE'\n    });\n    const options = {\n      headers: headerOptions,\n      params: data\n      //withCredentials: false,\n    };\n\n    return this.http.get(GETPath, options).pipe(catchError(this.handleError) // then handle the error\n    );\n  }\n\n  ConnectByGET_Bolb(urlPath, data) {\n    const methodName = \"ConnectByGET_Bolb\";\n    let GETPath = urlPath + \"?\" + data;\n    console.log(\"GET Path = \" + GETPath);\n    const headerOptions = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*'\n    });\n    const options = {\n      headers: headerOptions,\n      withCredentials: false,\n      responseType: 'blob'\n    };\n    // this.http.get<any>(\n    //   GETPath,\n    //   options,\n    // ).subscribe(data => {\n    //   // console.log(\" data = \" + data);\n    //   // console.log(\" id = \" + data.id);\n    //   console.log(\" data = \" + JSON.stringify(data));\n    //   return data;\n    // });\n    return this.http.get(GETPath, options).pipe(catchError(this.handleError) // then handle the error\n    );\n  }\n\n  ConnectByGET_BYID(urlPath, data) {\n    const methodName = \"ConnectByGET\";\n    // let GETPath = urlPath + \"?\" + data;\n    let GETPath = urlPath + data;\n    console.log(\"GET Path = \" + GETPath);\n    // let ls_BearerToken = this.credentialService.Obj.BearerKey;\n    const headerOptions = new HttpHeaders({\n      // 'Content-Type': 'application/json',\n      // 'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*',\n      // 'Authorization': 'Bearer ' + ls_BearerToken\n      'Content-Type': 'application/json',\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*',\n      'origins': 'localhost:8080/*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, PATCH, DELETE'\n    });\n    const options = {\n      headers: headerOptions\n      //withCredentials: false,\n    };\n\n    return this.http.get(GETPath, options).pipe(catchError(this.handleError) // then handle the error\n    );\n  }\n\n  handleError(error) {\n    const methodName = \"handleError\";\n    console.log(\"handleError [START]\");\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(`Backend returned code ${error.status}, `\n      //  + `body was: ${error.error}`\n      );\n    }\n    // return an observable with a user-facing error message\n    //return throwError('Something bad happened; please try again later.');\n    // return throwError(error.error);//return responese จาก webservice ไปให้\n    //return HttpErrorResponse ไปให้ เพื่อเอาไปใช้ get Status Code ได้\n    //สำหรับกรณีที่ response กลับมากับ error Status จะให้ไปดึง reponse ด้วย error.error ที่หน้าที่ใช้งานอีกทีแทน\n    return throwError(error);\n  }\n  static #_ = this.ɵfac = function HttpConnectService_Factory(t) {\n    return new (t || HttpConnectService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpConnectService,\n    factory: HttpConnectService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["catchError","HttpHeaders","throwError","HttpConnectService","constructor","http","methodName","ConnectByPOSTFormData","urlPath","formData","headerOptions","options","headers","post","pipe","handleError","ConnectByPOST","data","ConnectByPOST_JSON","ConnectByPOST_JSON_Bolb","withCredentials","responseType","observe","ConnectByGET","GETPath","console","log","params","get","ConnectByGET_Bolb","ConnectByGET_BYID","error","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aj_ph\\Documents\\Esi\\stamper-webui\\src\\app\\_services\\httpConnectService.service.ts"],"sourcesContent":["import { catchError } from 'rxjs/operators';\r\nimport { HttpErrorResponse, HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpConnectService {\r\n  className: string = \"HttpConnectService\";\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) {\r\n    const methodName = \"constructor\";\r\n  }\r\n\r\n  ConnectByPOSTFormData(urlPath: string, formData: FormData) {\r\n    const methodName = \"ConnectByPOST\";\r\n    const headerOptions = new HttpHeaders({\r\n      // 'Accept': 'application/json, text/plain, */*',\r\n      // 'Authorization': 'Bearer ' + ls_BearerToken\r\n    });\r\n\r\n    const options = {\r\n      headers: headerOptions,\r\n    };\r\n\r\n    return this.http.post<any>(\r\n      urlPath,\r\n      formData,\r\n      options,\r\n    ).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  ConnectByPOST(urlPath: string, data: HttpParams) {\r\n    const methodName = \"ConnectByPOST\";\r\n    // const headerOptions = new HttpHeaders();\r\n    // headerOptions.append('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n    // headerOptions.append('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE');\r\n    // headerOptions.append('Access-Control-Allow-Origin', '*');\r\n    // headerOptions.append('Content-Type', 'application/x-www-form-urlencode');\r\n    // //headerOptions.set('Accept', 'application/x-www-form-urlencoded');\r\n    // // headerOptions.set('Content-Type', 'application/json');\r\n    // headerOptions.append('Accept', 'application/x-www-form-urlencoded, application/json , text/plain, */*');\r\n\r\n\r\n    const headerOptions = new HttpHeaders({\r\n      //'Content-Type': 'application/x-www-form-urlencode',\r\n      'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*',\r\n    });\r\n\r\n\r\n    const options = {\r\n      headers: headerOptions,\r\n      //  withCredentials: false,\r\n      //responseType: 'blob' as 'json'\r\n    };\r\n\r\n    //**Angular 7+ ถ้าจะส่งแบบ x-www-form-urlencode ให้ส่ง body เป็น HttpParams และไม่ต้อง set HttpHeader\r\n    //จำเป็นต้องทำแบบนี้ไม่งั้น header มันจะเสีย\r\n\r\n    //**http post ไม่ต้องสั่ง unsubscribe มันทำให้เองตอนได้ค่าคืนมาแล้ว**\r\n    return this.http.post<any>(\r\n      urlPath,\r\n      data,\r\n      options,\r\n    )\r\n      .pipe(\r\n        catchError(this.handleError) // then handle the error\r\n      )\r\n      // .subscribe(\r\n      //   data => {\r\n      //     console.log(\" data = \" + JSON.stringify(data));\r\n      //   }\r\n      // )\r\n      ;\r\n\r\n  }\r\n\r\n\r\n  ConnectByPOST_JSON(urlPath: string, data: any) {\r\n    const methodName = \"ConnectByPOST_JSON\";\r\n    // const headerOptions = new HttpHeaders();\r\n    // headerOptions.append('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n    // headerOptions.append('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE');\r\n    // headerOptions.append('Access-Control-Allow-Origin', '*');\r\n    // headerOptions.append('Content-Type', 'application/json');\r\n    // headerOptions.append('Accept', 'application/x-www-form-urlencoded, application/json , text/plain, */*');\r\n\r\n    // let ls_BearerToken = this.credentialService.Obj.BearerKey;\r\n\r\n    const headerOptions = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      // 'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*',\r\n      // 'Authorization': 'Bearer ' + ls_BearerToken\r\n    });\r\n\r\n    const options = {\r\n      headers: headerOptions,\r\n      // withCredentials: false,\r\n      // responseType: 'blob' as 'json'\r\n    };\r\n\r\n    //**Angular 7+ ถ้าจะส่งแบบ x-www-form-urlencode ให้ส่ง body เป็น HttpParams และไม่ต้อง set HttpHeader\r\n    //จำเป็นต้องทำแบบนี้ไม่งั้น header มันจะเสีย\r\n\r\n    //**http post ไม่ต้องสั่ง unsubscribe มันทำให้เองตอนได้ค่าคืนมาแล้ว**\r\n    return this.http.post<any>(\r\n      urlPath,\r\n      // JSON.stringify(data),\r\n      data,\r\n      options,\r\n    )\r\n      .pipe(\r\n        catchError(this.handleError) // then handle the error\r\n      )\r\n      // .subscribe(\r\n      //   data => {\r\n      //     console.log(\" data = \" + JSON.stringify(data));\r\n      //   }\r\n      // )\r\n      ;\r\n\r\n  }\r\n\r\n  ConnectByPOST_JSON_Bolb(urlPath: string, data: any) {\r\n    const methodName = \"ConnectByPOST_JSON_Bolb\";\r\n    // const headerOptions = new HttpHeaders();\r\n    // headerOptions.append('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n    // headerOptions.append('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE');\r\n    // headerOptions.append('Access-Control-Allow-Origin', '*');\r\n    // headerOptions.append('Content-Type', 'application/json');\r\n    // headerOptions.append('Accept', 'application/x-www-form-urlencoded, application/json , text/plain, */*');\r\n\r\n\r\n    const headerOptions = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*',\r\n    });\r\n\r\n    let options = {\r\n      headers: headerOptions,\r\n      withCredentials: false,\r\n      responseType: 'blob' as 'json'\r\n    };\r\n\r\n    //**Angular 7+ ถ้าจะส่งแบบ x-www-form-urlencode ให้ส่ง body เป็น HttpParams และไม่ต้อง set HttpHeader\r\n    //จำเป็นต้องทำแบบนี้ไม่งั้น header มันจะเสีย\r\n\r\n    //**http post ไม่ต้องสั่ง unsubscribe มันทำให้เองตอนได้ค่าคืนมาแล้ว**\r\n    return this.http.post<Response>(\r\n      urlPath,\r\n      // data.toString(),\r\n      //JSON.stringify(data),\r\n      data,\r\n      //options,\r\n      { headers: headerOptions, observe: 'response', responseType: 'blob' as 'json' },\r\n    )\r\n      .pipe(\r\n        catchError(this.handleError) // then handle the error\r\n      )\r\n      // .subscribe(\r\n      //   blobData => {\r\n      //     this.logger.commonLogger(this.classname, methodName, \"[BlobData]\");\r\n      //     let fileName = blobData.headers.get('Content-Disposition').split(';')[1].split('=')[1].replace(/\\\"/g, '')\r\n      //     this.logger.commonLogger(this.classname, methodName, \"Header Name = \" + fileName);\r\n\r\n      //     this.commonService.Convert_BlobToBase64(blobData.body).then(res => {\r\n      //       let objectURL = '' + res; // res is base64 now\r\n      //       //this.pdf = this.sanitizer.bypassSecurityTrustResourceUrl(objectURL);\r\n      //       this.pdf = objectURL;\r\n\r\n\r\n      //       const downloadLink = document.createElement(\"a\");\r\n      //       downloadLink.href = this.pdf;\r\n      //       downloadLink.download = fileName;\r\n      //       downloadLink.click();\r\n\r\n      //       //ปิด BlockUI Loading\r\n      //       this.commonService.UnblockDocument();\r\n      //       this.logger.commonLogger(this.classname, methodName, \"[END]\");\r\n      //     });\r\n      //   }\r\n      // )\r\n      ;\r\n\r\n  }\r\n\r\n  ConnectByGET(urlPath: string, data: any) {\r\n    const methodName = \"ConnectByGET\";\r\n    // let GETPath = urlPath + \"?\" + data;\r\n    let GETPath = urlPath\r\n    console.log(\"GET Path = \" + GETPath);\r\n    // let ls_BearerToken = this.credentialService.Obj.BearerKey;\r\n\r\n    const headerOptions = new HttpHeaders({\r\n      // 'Content-Type': 'application/json',\r\n      // 'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*',\r\n      // 'Authorization': 'Bearer ' + ls_BearerToken\r\n\r\n      'Content-Type': 'application/json',\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'origins': 'localhost:8080/*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, PATCH, DELETE',\r\n    });\r\n\r\n    const options = {\r\n      headers: headerOptions,\r\n      params: data,\r\n      //withCredentials: false,\r\n    };\r\n    return this.http.get<any>(\r\n      GETPath,\r\n      options,\r\n    )\r\n      .pipe(\r\n        catchError(this.handleError) // then handle the error\r\n      )\r\n\r\n  }\r\n\r\n\r\n  ConnectByGET_Bolb(urlPath: string, data: any) {\r\n    const methodName = \"ConnectByGET_Bolb\";\r\n    let GETPath = urlPath + \"?\" + data;\r\n    console.log(\"GET Path = \" + GETPath);\r\n\r\n    const headerOptions = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*',\r\n    });\r\n\r\n    const options = {\r\n      headers: headerOptions,\r\n      withCredentials: false,\r\n      responseType: 'blob' as 'json'\r\n    };\r\n\r\n    // this.http.get<any>(\r\n    //   GETPath,\r\n    //   options,\r\n    // ).subscribe(data => {\r\n    //   // console.log(\" data = \" + data);\r\n    //   // console.log(\" id = \" + data.id);\r\n    //   console.log(\" data = \" + JSON.stringify(data));\r\n    //   return data;\r\n    // });\r\n\r\n\r\n    return this.http.get<any>(\r\n      GETPath,\r\n      options,\r\n    )\r\n      .pipe(\r\n        catchError(this.handleError) // then handle the error\r\n      )\r\n  }\r\n\r\n  ConnectByGET_BYID(urlPath: string, data: any) {\r\n    const methodName = \"ConnectByGET\";\r\n    // let GETPath = urlPath + \"?\" + data;\r\n    let GETPath = urlPath + data\r\n    console.log(\"GET Path = \" + GETPath);\r\n    // let ls_BearerToken = this.credentialService.Obj.BearerKey;\r\n\r\n    const headerOptions = new HttpHeaders({\r\n      // 'Content-Type': 'application/json',\r\n      // 'Accept': 'application/x-www-form-urlencoded, application/json , text/plain, */*',\r\n      // 'Authorization': 'Bearer ' + ls_BearerToken\r\n\r\n      'Content-Type': 'application/json',\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'origins': 'localhost:8080/*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, PATCH, DELETE',\r\n    });\r\n\r\n    const options = {\r\n      headers: headerOptions,\r\n\r\n      //withCredentials: false,\r\n    };\r\n    return this.http.get<any>(\r\n      GETPath,\r\n      options,\r\n    )\r\n      .pipe(\r\n        catchError(this.handleError) // then handle the error\r\n      )\r\n\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    const methodName = \"handleError\";\r\n    console.log(\"handleError [START]\");\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, `\r\n        //  + `body was: ${error.error}`\r\n      );\r\n    }\r\n    // return an observable with a user-facing error message\r\n    //return throwError('Something bad happened; please try again later.');\r\n    // return throwError(error.error);//return responese จาก webservice ไปให้\r\n\r\n    //return HttpErrorResponse ไปให้ เพื่อเอาไปใช้ get Status Code ได้\r\n    //สำหรับกรณีที่ response กลับมากับ error Status จะให้ไปดึง reponse ด้วย error.error ที่หน้าที่ใช้งานอีกทีแทน\r\n    return throwError(error);\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}