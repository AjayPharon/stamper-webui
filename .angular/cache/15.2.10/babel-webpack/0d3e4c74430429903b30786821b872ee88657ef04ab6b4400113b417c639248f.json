{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/aj_ph/Documents/Esi/stamper-webui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CBSignImage } from '../Context/CBSignImage';\nimport { lastValueFrom } from 'rxjs';\nimport { environment as env } from '../../environments/environment';\nimport { CBDocumentImage } from '../Context/CBDocumentImage';\nlet SignStamperComponent = class SignStamperComponent {\n  constructor(httpService, commonService) {\n    this.httpService = httpService;\n    this.commonService = commonService;\n    this.xPosition = 0;\n    this.yPosition = 0;\n    this.scaleX = 100;\n    this.scaleY = 100;\n    this.documentID = \"\";\n    this._activeIndex = 0;\n    this.documentImageList = [];\n    this.signImageList = [];\n    this.signVisible = false;\n    this.images = [];\n    this.size = null;\n    this.zoom = 1.0;\n    this.showImage = false;\n    this.degree = 0;\n    this.showGallery = false;\n    this.position = 'bottom';\n    this.textStamp = '';\n    this.showFrame = false;\n    this.textValue = '';\n    this.frameTop = 0;\n    this.frameLeft = 0;\n    this.responsiveOptions = [{\n      breakpoint: '1024px',\n      numVisible: 5\n    }, {\n      breakpoint: '768px',\n      numVisible: 3\n    }, {\n      breakpoint: '560px',\n      numVisible: 1\n    }];\n  }\n  showTextFrame(event) {\n    this.showFrame = true;\n    this.frameTop = event.clientY;\n    this.frameLeft = event.clientX;\n  }\n  confirmText() {\n    // ทำสิ่งที่คุณต้องการเมื่อผู้ใช้ยืนยันข้อความ\n    console.log('ข้อความที่กรอก:', this.textValue);\n    // ซ่อนกล่องพิมข้อความ\n    this.showFrame = false;\n  }\n  get activeIndex() {\n    return this._activeIndex;\n  }\n  set activeIndex(newValue) {\n    if (this.images && 0 <= newValue && newValue <= this.images.length - 1) {\n      this._activeIndex = newValue;\n    }\n  }\n  ngOnInit() {}\n  onFileSelect(event) {\n    const reader = new FileReader();\n    for (let file of event.files) {\n      reader.readAsDataURL(file);\n      reader.onload = event => {\n        let sign_item = new CBSignImage();\n        sign_item.signContent = reader.result.toString();\n        sign_item.signWidth = this.scaleX;\n        sign_item.signHeight = this.scaleY;\n        sign_item.x = this.xPosition;\n        sign_item.y = this.yPosition;\n        sign_item.pageNumber = this._activeIndex;\n        sign_item.documentID = this.documentID;\n        sign_item.textStamp = this.textStamp;\n        this.signImageList.push(sign_item);\n      };\n    }\n    console.log(this.signImageList);\n    this.signVisible = true;\n  }\n  onFileRemove(event) {\n    event.files.pop();\n  }\n  stamp() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // let ao_item = new CBSignImage();\n      // ao_item.fileContent = this.signBase64.split(',')[1];\n      // ao_item.scaleX = this.scaleX;\n      // ao_item.scaleY = this.scaleY;\n      // ao_item.xPosition = this.xPosition;\n      // ao_item.yPosition = this.yPosition;\n      console.log(_this.signImageList.at(0)?.x);\n      console.log(_this.signImageList.at(0)?.y);\n      // let payload = new HttpParams().set('requestData', JSON.stringify(this.signImageList))\n      let response = yield lastValueFrom(_this.httpService.ConnectByPOST_JSON(`${env.localhost}/stamper/stampDocument`, _this.signImageList));\n      if (response != null) {\n        console.log('image edited');\n      }\n    })();\n  }\n  documentUpload(event) {\n    const reader = new FileReader();\n    for (let file of event.files) {\n      reader.readAsDataURL(file);\n      reader.onload = event => {\n        this.upload(file, 100);\n        // let document_item = new CBDocumentImage();\n        // document_item.fileContent = reader.result!.toString();\n        // document_item.scaleX = this.scaleX;\n        // document_item.scaleY = this.scaleY;\n        // document_item.xPosition = this.xPosition;\n        // document_item.yPosition = this.yPosition;\n        // document_item.imageId = this.li_CBImage[this.activeIndex].id\n        // this.documentImageList.push(document_item);\n      };\n    }\n  }\n\n  upload(file, ai_letterType) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const methodName = \"multiupload\";\n      console.log(\"START \" + methodName);\n      let urlPath = env.localhost + \"/stamper/convert\";\n      let formData = new FormData();\n      formData.append('file', file);\n      formData.append('filename', file.name);\n      formData.append('letterType', ai_letterType.toString());\n      console.log(\"ทดสอบ\", formData.getAll('file'));\n      try {\n        const response = yield _this2.httpService.ConnectByPOSTFormData(urlPath, formData).toPromise();\n        console.log(\"Upload response:\", response);\n        let documentCB = new CBDocumentImage(_this2.commonService);\n        documentCB.JSONToCB(response);\n        _this2.documentID = documentCB.documentID;\n        _this2.documentImageList = documentCB.imageBase64;\n        console.log('id', _this2.documentID);\n      } catch (error) {\n        console.error(\"Upload error:\", error);\n      }\n    })();\n  }\n  showNextImage() {\n    this._activeIndex++;\n    // this.currentImageIndex = (this.currentImageIndex + 1) % this.li_CBScanImage.length;\n    // for (let i = 0; i < this.documentImageList.length; i++) {\n    //   console.log('image id: ',this.documentImageList.at(i)['imageId']);\n    //   console.log('image index: ',this.activeIndex);\n    //   if (this.documentImageList.at(this.activeIndex) === this.documentImageList.at(i)) {\n    //     this.signVisible = true;\n    //   } else {\n    //     this.signVisible = false;\n    //   }\n    // }\n  }\n\n  showPreviousImage() {\n    this._activeIndex--;\n    // this.currentImageIndex = (this.currentImageIndex - 1 + this.li_CBScanImage.length) % this.li_CBScanImage.length;\n    // for (let i = 0; i < this.documentImageList.length; i++) {\n    //   console.log('image id: ',this.documentImageList.at(i)['imageId']);\n    //   console.log('image index: ',this.activeIndex);\n    //   if (this.documentImageList.at(this.activeIndex) === this.documentImageList.at(i)) {\n    //     this.signVisible = true;\n    //     console.log(this.documentImageList.at(i));\n    //   } else {\n    //     this.signVisible = false;\n    //   }\n    // }\n  }\n\n  clickComponent(component) {\n    console.log('click', component);\n  }\n  onMoveEnd(event, component) {\n    component.x = event.x;\n    component.y = event.y;\n    console.log(event.x, event.y);\n    console.log('index : ', this._activeIndex);\n  }\n  onResizing(event, component) {\n    this.size = event.size;\n    console.log(this.size);\n    component.signWidth = event.size.width;\n    component.signHeight = event.size.height;\n  }\n};\nSignStamperComponent = __decorate([Component({\n  selector: 'app-sign-stamper',\n  templateUrl: './sign-stamper.component.html',\n  styleUrls: ['./sign-stamper.component.scss']\n})], SignStamperComponent);\nexport { SignStamperComponent };","map":{"version":3,"mappings":"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","names":["Component","CBSignImage","lastValueFrom","environment","env","CBDocumentImage","SignStamperComponent","constructor","httpService","commonService","breakpoint","numVisible","showTextFrame","event","showFrame","frameTop","clientY","frameLeft","clientX","confirmText","console","log","textValue","activeIndex","_activeIndex","newValue","images","length","ngOnInit","onFileSelect","reader","FileReader","file","files","readAsDataURL","onload","sign_item","signContent","result","toString","signWidth","scaleX","signHeight","scaleY","x","xPosition","y","yPosition","pageNumber","documentID","textStamp","signImageList","push","signVisible","onFileRemove","pop","stamp","at","response","ConnectByPOST_JSON","localhost","documentUpload","upload","ai_letterType","methodName","urlPath","formData","FormData","append","name","getAll","ConnectByPOSTFormData","toPromise","documentCB","JSONToCB","documentImageList","imageBase64","error","showNextImage","showPreviousImage","clickComponent","component","onMoveEnd","onResizing","size","width","height","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\aj_ph\\Documents\\Esi\\stamper-webui\\src\\app\\sign-stamper\\sign-stamper.component.ts"],"sourcesContent":["import { CommonService } from './../_services/common.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CBSignImage } from '../Context/CBSignImage';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { HttpConnectService } from '../_services/httpConnectService.service';\r\nimport { environment as env } from '../../environments/environment';\r\nimport { CBDocumentImage } from '../Context/CBDocumentImage';\r\ninterface UploadEvent {\r\n  originalEvent: Event;\r\n  files: File[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-sign-stamper',\r\n  templateUrl: './sign-stamper.component.html',\r\n  styleUrls: ['./sign-stamper.component.scss']\r\n})\r\n\r\nexport class SignStamperComponent implements OnInit {\r\n  xPosition: number = 0;\r\n  yPosition: number = 0;\r\n  scaleX: number = 100;\r\n  scaleY: number = 100;\r\n  documentID: string = \"\";\r\n  _activeIndex: number = 0;\r\n  documentImageList: any[] = [];\r\n  signImageList: CBSignImage[] = []\r\n  signVisible = false;\r\n  images: any[] = [];\r\n  size: any = null;\r\n  zoom: number = 1.0;\r\n  showImage = false;\r\n  degree: number = 0;\r\n  showGallery = false;\r\n  position: string = 'bottom';\r\n  textStamp: string = '';\r\n\r\n  showFrame = false;\r\n  textValue = '';\r\n  frameTop = 0;\r\n  frameLeft = 0;\r\n\r\n  constructor(   \r\n    private httpService: HttpConnectService,\r\n    private commonService : CommonService) { }\r\n\r\n    showTextFrame(event: MouseEvent) {\r\n      this.showFrame = true;\r\n      this.frameTop = event.clientY;\r\n      this.frameLeft = event.clientX;\r\n    }\r\n  \r\n    confirmText() {\r\n      // ทำสิ่งที่คุณต้องการเมื่อผู้ใช้ยืนยันข้อความ\r\n      console.log('ข้อความที่กรอก:', this.textValue);\r\n  \r\n      // ซ่อนกล่องพิมข้อความ\r\n      this.showFrame = false;\r\n    }\r\n    \r\n  get activeIndex(): number {\r\n    return this._activeIndex;\r\n  }\r\n\r\n  set activeIndex(newValue) {\r\n    if (this.images && 0 <= newValue && newValue <= this.images.length - 1) {\r\n      this._activeIndex = newValue;\r\n    }\r\n  }\r\n\r\n  responsiveOptions: any[] = [\r\n    {\r\n      breakpoint: '1024px',\r\n      numVisible: 5\r\n    },\r\n    {\r\n      breakpoint: '768px',\r\n      numVisible: 3\r\n    },\r\n    {\r\n      breakpoint: '560px',\r\n      numVisible: 1\r\n    }\r\n  ];\r\n  ngOnInit() {\r\n\r\n  }\r\n  onFileSelect(event: UploadEvent) {\r\n    const reader = new FileReader();\r\n    for (let file of event.files) {\r\n      reader.readAsDataURL(file);\r\n      reader.onload = (event) => {\r\n        let sign_item = new CBSignImage();\r\n        sign_item.signContent = reader.result!.toString();\r\n        sign_item.signWidth = this.scaleX;\r\n        sign_item.signHeight = this.scaleY;\r\n        sign_item.x = this.xPosition;\r\n        sign_item.y = this.yPosition;\r\n        sign_item.pageNumber = this._activeIndex;\r\n        sign_item.documentID = this.documentID;\r\n        sign_item.textStamp =  this.textStamp;\r\n        this.signImageList.push(sign_item);\r\n      }\r\n    }\r\n    console.log(this.signImageList);\r\n    \r\n\r\n    this.signVisible = true;\r\n  }\r\n\r\n  onFileRemove(event: UploadEvent) {\r\n    event.files.pop();\r\n  }\r\n\r\n  async stamp() {\r\n    // let ao_item = new CBSignImage();\r\n    // ao_item.fileContent = this.signBase64.split(',')[1];\r\n    // ao_item.scaleX = this.scaleX;\r\n    // ao_item.scaleY = this.scaleY;\r\n    // ao_item.xPosition = this.xPosition;\r\n    // ao_item.yPosition = this.yPosition;\r\n    console.log(this.signImageList.at(0)?.x);\r\n    console.log(this.signImageList.at(0)?.y);\r\n    \r\n    // let payload = new HttpParams().set('requestData', JSON.stringify(this.signImageList))\r\n    let response = await lastValueFrom(this.httpService.ConnectByPOST_JSON(`${env.localhost}/stamper/stampDocument`, this.signImageList));\r\n    if (response != null) {\r\n      console.log('image edited');\r\n    }\r\n  }\r\n  documentUpload(event: UploadEvent) {\r\n    const reader = new FileReader();\r\n    for (let file of event.files) {\r\n      reader.readAsDataURL(file);\r\n      reader.onload = (event) => {\r\n        this.upload(file,100);\r\n        // let document_item = new CBDocumentImage();\r\n        // document_item.fileContent = reader.result!.toString();\r\n        // document_item.scaleX = this.scaleX;\r\n        // document_item.scaleY = this.scaleY;\r\n        // document_item.xPosition = this.xPosition;\r\n        // document_item.yPosition = this.yPosition;\r\n        // document_item.imageId = this.li_CBImage[this.activeIndex].id\r\n        // this.documentImageList.push(document_item);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  async upload(file: File, ai_letterType: number){\r\n    const methodName = \"multiupload\";\r\n    console.log(\"START \" + methodName);\r\n    let urlPath: string = env.localhost + \"/stamper/convert\";\r\n    let formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('filename',file.name)\r\n    formData.append('letterType', ai_letterType.toString());\r\n    console.log(\"ทดสอบ\",formData.getAll('file'));\r\n    try {\r\n        const response = await this.httpService.ConnectByPOSTFormData(urlPath, formData).toPromise();\r\n        console.log(\"Upload response:\", response);\r\n        let documentCB = new CBDocumentImage(this.commonService);\r\n        documentCB.JSONToCB(response);\r\n        this.documentID = documentCB.documentID;\r\n        this.documentImageList = documentCB.imageBase64;\r\n        console.log('id' , this.documentID);\r\n        \r\n    } catch (error) {\r\n        console.error(\"Upload error:\", error);\r\n    }\r\n  }\r\n\r\n  showNextImage() {\r\n    this._activeIndex++;\r\n    // this.currentImageIndex = (this.currentImageIndex + 1) % this.li_CBScanImage.length;\r\n\r\n    // for (let i = 0; i < this.documentImageList.length; i++) {\r\n    //   console.log('image id: ',this.documentImageList.at(i)['imageId']);\r\n    //   console.log('image index: ',this.activeIndex);\r\n    //   if (this.documentImageList.at(this.activeIndex) === this.documentImageList.at(i)) {\r\n    //     this.signVisible = true;\r\n    //   } else {\r\n    //     this.signVisible = false;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  showPreviousImage() {\r\n    this._activeIndex--;\r\n    // this.currentImageIndex = (this.currentImageIndex - 1 + this.li_CBScanImage.length) % this.li_CBScanImage.length;\r\n    // for (let i = 0; i < this.documentImageList.length; i++) {\r\n    //   console.log('image id: ',this.documentImageList.at(i)['imageId']);\r\n    //   console.log('image index: ',this.activeIndex);\r\n    //   if (this.documentImageList.at(this.activeIndex) === this.documentImageList.at(i)) {\r\n    //     this.signVisible = true;\r\n    //     console.log(this.documentImageList.at(i));\r\n\r\n\r\n    //   } else {\r\n    //     this.signVisible = false;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  clickComponent(component: CBSignImage) {\r\n    console.log('click', component);\r\n  }\r\n\r\n  onMoveEnd(event: any, component: CBSignImage) {\r\n    component.x = event.x;\r\n    component.y = event.y;\r\n    console.log(event.x, event.y);\r\n    console.log('index : ', this._activeIndex);\r\n  }\r\n\r\n  onResizing(event: any, component: CBSignImage) {\r\n    this.size = event.size;\r\n    console.log(this.size);\r\n    component.signWidth = event.size.width;\r\n    component.signHeight = event.size.height;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}